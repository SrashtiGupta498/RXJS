let of,Observable,map,toArray;_d10‍.w("rxjs",[["of",["of"],function(v){of=v}],["Observable",["Observable"],function(v){Observable=v}]]);_d10‍.w("rxjs/operators",[["map",["map"],function(v){map=v}],["toArray",["toArray"],function(v){toArray=v}]]);// import "rxjs/add/observable/from";
// import 'rxjs/add/operator/max'

// let list1 = [1, 6, 15, 10, 58, 2, 40];
// from(list1).max((a,b)=>a-b).subscribe(x => console.log("The Max value is "+x));


map(x => x * x)(of(1, 2, 3)).subscribe((v) => console.log(`Output is: ${v}`));
map(n=> n*n*n)(of(2,7,9)).subscribe((l)=> console.log(`the cube root is ${l}`));
//sort the array

const obs = of(5,8,7,9,1,0,6,6,5).pipe(
  toArray(),
  map(arr=> arr.sort((a,b) => a - b))
);

obs.subscribe(x => {
  _d10‍.g.console.log(x);
});
//sort the words

const sortbyname = (a,b)=>{
  const nameA = a.name.toLocaleUpperCase();
  const nameB = b.name.toLocaleUpperCase();
  return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;
}
const $observable = of([
   {"id":4,"name":"sejal"},
   {"id":54,"name":'srashti'},
   {"id":14,"name":'anamika'},
   {"id":3,"name":"preeti"}
])
   $observable
   .pipe(map(data=>data.sort(sortbyname)))
   .subscribe(_d10‍.g.console.log);
//////////////////////
//createObservable

var observer = new Observable(
   function subscribe(subscriber){
      subscriber.next("My first observable")
   }

);
//subscribe observer
observer.subscribe(x=>_d10‍.g.console.log(x));

//execute observer
var observers = new Observable(
   function subscribe(subscriber){
      try{
      subscriber.next("My first observable");
      subscriber.next("Testing Observable");
      subscribe.complete();
   } catch(e)
   {
      subscriber.error(e);
   }
   }
);
observers.subscribe(x=>_d10‍.g.console.log(x),
()=>console.log("Observable is complete"));

// console.log(count);
// map(s=>s)(of(7,8,9)).subscribe((s)=> console.log(`the root is${s}`));
// import { Observable } from 'rxjs';

// var observer = new Observable(
//    function subscribe(subscriber) {
//       subscriber.next("My First Observable")
//    }
// );
// observer.subscribe(x => console.log(x));

// var observer = new Observable(
//    function subscribe(subscriber) {
//       try {
//          subscriber.next("My First Observable");
//          subscriber.next("Testing Observable");
//          subscriber.complete();
//       } catch(e){
//          subscriber.error(e);
//       }
//    }
// );
// observer.subscribe(x => console.log(x), (e)=>console.log(e), 
//    ()=>console.log("Observable is complete"));
//    import { of } from 'rxjs';
// import { map, reduce, filter } from 'rxjs/operators';

// let test1 = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
// let case1 = test1.pipe(
//    filter(x => x % 2 === 0),
//    reduce((acc, one) => acc + one, 0)
// )
// case1.subscribe(x => console.log(x));
// //////////////////

// // import { count } from 'rxjs/operators';

// // let all_nums = of(1, 7, 5, 10, 10, 20);
// // let final_val = all_nums.pipe(count());
// // final_val.subscribe(x => console.log("The count is "+x));

// import { count } from 'rxjs/operators';

// let all_nums = of(1, 7, 5, 10, 10, 20);
// let final_val = all_nums.pipe(count());
// let test = final_val.subscribe(x => console.log("The count is "+x));
// test.unsubscribe();

// import { Subject } from 'rxjs';

// const subject_test = new Subject();

// subject_test.subscribe({
//    next: (v) => console.log(`From Subject : ${v}`)
// });
// subject_test.subscribe({
//    next: (v) => console.log(`From Subject: ${v}`)
// });
// subject_test.next("A");
// subject_test.complete();
// subject_test.next("B");

// // import { Subject } from 'rxjs';

// const subject_testm = new Subject();

// subject_testm.subscribe({
//    next: (v) => console.log(`From Subject : ${v}`)
// });
// subject_testm.subscribe({
//    next: (v) => console.log(`From Subject: ${v}`)
// });
// subject_testm.next("A");
// subject_testm.complete();
// subject_testm.next("B");
