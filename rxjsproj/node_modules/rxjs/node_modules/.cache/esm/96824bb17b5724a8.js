let of,merge,asyncScheduler,subscribeOn,filter,timeInterval,toArray;_7b5‍.w("rxjs",[["of",["of"],function(v){of=v}],["merge",["merge"],function(v){merge=v}],["asyncScheduler",["asyncScheduler"],function(v){asyncScheduler=v}]]);_7b5‍.w("rxjs/operators",[["subscribeOn",["subscribeOn"],function(v){subscribeOn=v}],["filter",["filter"],function(v){filter=v}],["timeInterval",["timeInterval"],function(v){timeInterval=v}],["toArray",["toArray"],function(v){toArray=v}]]);


let test1 = of(2,4,6,8).pipe(subscribeOn(asyncScheduler));
let test2 = of(3,5,7,9);
let sub1 = merge(test1 , test2).subscribe(_7b5‍.g.console.log);

///////////
let list1 = of(4,6,8,10,12);
let final_val =list1.pipe(timeInterval());
final_val.subscribe(x=>_7b5‍.g.console.log(x));

let n = test2.pipe(toArray());
n.subscribe(num=>_7b5‍.g.console.log(num));
