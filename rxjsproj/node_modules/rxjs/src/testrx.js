// import "rxjs/add/observable/from";
// import 'rxjs/add/operator/max'

// let list1 = [1, 6, 15, 10, 58, 2, 40];
// from(list1).max((a,b)=>a-b).subscribe(x => console.log("The Max value is "+x));
// import { of } from 'rxjs';
// import { map } from 'rxjs/operators';

map(x => x * x)(of(1, 2, 3)).subscribe((v) => console.log(`Output is: ${v}`));
import { Observable } from 'rxjs';

var observer = new Observable(
   function subscribe(subscriber) {
      subscriber.next("My First Observable")
   }
);
observer.subscribe(x => console.log(x));

var observer = new Observable(
   function subscribe(subscriber) {
      try {
         subscriber.next("My First Observable");
         subscriber.next("Testing Observable");
         subscriber.complete();
      } catch(e){
         subscriber.error(e);
      }
   }
);
observer.subscribe(x => console.log(x), (e)=>console.log(e), 
   ()=>console.log("Observable is complete"));
   import { of } from 'rxjs';
import { map, reduce, filter } from 'rxjs/operators';

let test1 = of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
let case1 = test1.pipe(
   filter(x => x % 2 === 0),
   reduce((acc, one) => acc + one, 0)
)
case1.subscribe(x => console.log(x));
//////////////////

// import { count } from 'rxjs/operators';

// let all_nums = of(1, 7, 5, 10, 10, 20);
// let final_val = all_nums.pipe(count());
// final_val.subscribe(x => console.log("The count is "+x));

import { count } from 'rxjs/operators';

let all_nums = of(1, 7, 5, 10, 10, 20);
let final_val = all_nums.pipe(count());
let test = final_val.subscribe(x => console.log("The count is "+x));
test.unsubscribe();

import { Subject } from 'rxjs';

const subject_test = new Subject();

subject_test.subscribe({
   next: (v) => console.log(`From Subject : ${v}`)
});
subject_test.subscribe({
   next: (v) => console.log(`From Subject: ${v}`)
});
subject_test.next("A");
subject_test.complete();
subject_test.next("B");

// import { Subject } from 'rxjs';

const subject_testm = new Subject();

subject_testm.subscribe({
   next: (v) => console.log(`From Subject : ${v}`)
});
subject_testm.subscribe({
   next: (v) => console.log(`From Subject: ${v}`)
});
subject_testm.next("A");
subject_testm.complete();
subject_testm.next("B");
