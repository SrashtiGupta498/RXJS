//working with operators
//An operator is a pure function which takes in observable as input and the output is also an observable.
import { maxHeaderSize } from 'http';
import { of ,from,Observable} from 'rxjs';
import {map ,reduce , filter,count,max, concat} from 'rxjs/operators';

let test1 = of(1,4,5,7,8,3,4,9);
let case1 =test1.pipe(
    filter(x=>x%2==0),
    reduce((acc,one)=>acc+one ,0)
)
case1.subscribe(x=>console.log(x));
let finalvalue= test1.pipe(count());
finalvalue.subscribe(x=>console.log("the coun is"+x));
let maxnum = test1.pipe(max());
maxnum.subscribe(m=>console.log("The max number is"+m));

let items=[
    {item1: "A", price:10000.00},
    {item2:"B",price:850.00},
    {item3:"C",price:150.00}
];
let final_item = from(items).pipe(reduce((acc,itemsdet)=>acc+itemsdet.price ,0));
final_item.subscribe(x=>console.log("totalproce"+x));

//concat

let list1 =of(3,6,8,10,12,14);
let list2 = of(4,9,18,90);
let final_val = list1.pipe(concat(list2));
final_val.subscribe(x=>console.log(x));

//map

// import {fromEvent} from 'rxjs';
// let btn= document.getElementById("btn click");
// let btn_clicks = fromEvent(btn ,'click');

// let position = btn_clicks.pipe(map(ev=>ev));
// positions.subscribe(x=> console.log("x:"+x.clientX+" and y:"+x.clientY));

